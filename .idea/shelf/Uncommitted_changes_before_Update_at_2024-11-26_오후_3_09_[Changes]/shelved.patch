Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.compose)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.example.sharon\"\r\n    compileSdk = 35\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.example.sharon\"\r\n        minSdk = 26\r\n        targetSdk = 35\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/app/build.gradle.kts	(date 1732437865158)
@@ -56,4 +56,15 @@
     androidTestImplementation(libs.androidx.ui.test.junit4)
     debugImplementation(libs.androidx.ui.tooling)
     debugImplementation(libs.androidx.ui.test.manifest)
+
+
+    // 코루틴 (Coroutine) 라이브러리
+    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
+    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
+
+    // Retrofit & GSON 라이브러리
+    implementation("com.squareup.retrofit2:retrofit:2.9.0")
+    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
+    implementation("com.google.code.gson:gson:2.10.1")
+    implementation("com.squareup.retrofit2:converter-scalars:2.9.0")
 }
\ No newline at end of file
Index: app/src/main/java/com/example/sharon/screens/Start.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sharon.screens\r\n\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.BottomAppBar\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.sharon.ui.theme.SharonTheme\r\nimport kotlinx.coroutines.delay\r\n\r\n// 완성\r\nclass Start {\r\n    companion object {\r\n        @Composable\r\n        fun StartScreen(configuration: Configuration, nextScreen: () -> Unit) {\r\n            val screenWidth = configuration.screenWidthDp\r\n            val screenHeight = configuration.screenHeightDp\r\n\r\n            LaunchedEffect(Unit) {\r\n                delay(3000)\r\n                nextScreen()\r\n            }\r\n\r\n            Scaffold(\r\n                bottomBar = {\r\n                    BottomAppBar (\r\n                        containerColor = MaterialTheme.colorScheme.background,\r\n                        modifier = Modifier\r\n                            .height((screenHeight * 8/100).dp)\r\n                            .padding(16.dp)\r\n                    ) {\r\n                        Text(\r\n                            // 넷마블이나 카카오처럼 team 4.5 로고 띄우고 Start할까?\r\n                            text = \"by team 4.5\",\r\n                            color = MaterialTheme.colorScheme.secondary,\r\n                            textAlign = TextAlign.End,\r\n                            modifier = Modifier.fillMaxWidth()\r\n                        )\r\n                    }\r\n                }\r\n            ) { innerPadding ->\r\n                Column(\r\n                    verticalArrangement = Arrangement.Center,\r\n                    horizontalAlignment = Alignment.CenterHorizontally,\r\n                    modifier = Modifier\r\n                        .padding(innerPadding)\r\n                        .fillMaxSize()\r\n                        .background(MaterialTheme.colorScheme.background)\r\n                ) {\r\n                    Text(\r\n                        text = \"무궁화 꽃이\",\r\n                        fontSize = (screenWidth * 15/100).sp,\r\n                        color = MaterialTheme.colorScheme.primary\r\n                    )\r\n                    Text(\r\n                        text = \"피었습니다!\",\r\n                        fontSize = (screenWidth * 15/100).sp,\r\n                        color = MaterialTheme.colorScheme.primary\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun StartScreenPreview() {\r\n    SharonTheme {\r\n        Start.StartScreen(LocalConfiguration.current, nextScreen = {})\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sharon/screens/Start.kt b/app/src/main/java/com/example/sharon/screens/Start.kt
--- a/app/src/main/java/com/example/sharon/screens/Start.kt	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/app/src/main/java/com/example/sharon/screens/Start.kt	(date 1732437865169)
@@ -24,6 +24,7 @@
 import com.example.sharon.ui.theme.SharonTheme
 import kotlinx.coroutines.delay
 
+
 // 완성
 class Start {
     companion object {
Index: app/src/main/java/com/example/sharon/screens/InGame.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sharon.screens\r\n\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.sharon.ui.theme.Green\r\nimport com.example.sharon.ui.theme.Yellow\r\nimport com.example.sharon.ui.theme.Red\r\nimport com.example.sharon.ui.theme.SharonTheme\r\n\r\n// 완성\r\nclass InGame {\r\n    companion object {\r\n        @Composable\r\n        fun InGameScreen(configuration: Configuration, gameState: List<Int> = listOf(180, 10, 10), nextScreen: () -> Unit) {\r\n            val screenWidth: Int = configuration.screenWidthDp\r\n            val screenHeight: Int = configuration.screenHeightDp\r\n\r\n            val timeLeft: Int = gameState[0]\r\n            val numberOfPlayers: Int = gameState[1]\r\n            val numberOfAlivePlayers: Int = gameState[2]\r\n\r\n            Scaffold { innerPadding ->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .background(MaterialTheme.colorScheme.background)\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                ) {\r\n                    Column(\r\n                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                        verticalArrangement = Arrangement.Center,\r\n                        modifier = Modifier\r\n                            .fillMaxSize()\r\n                            .padding(8.dp)\r\n                    ) {\r\n                        Column(\r\n                            horizontalAlignment = Alignment.CenterHorizontally,\r\n                            verticalArrangement = Arrangement.Center\r\n                        ) {\r\n                            if(timeLeft > 90) {\r\n                                Text(\r\n                                    text = \"$timeLeft\",\r\n                                    fontSize = (screenWidth * 25/100).sp,\r\n                                    color = Green\r\n                                )\r\n                            } else if(timeLeft in 31..90) {\r\n                                Text(\r\n                                    text = \"$timeLeft\",\r\n                                    fontSize = (screenWidth * 25/100).sp,\r\n                                    color = Yellow\r\n                                )\r\n                            } else {\r\n                                Text(\r\n                                    text = \"$timeLeft\",\r\n                                    fontSize = (screenWidth * 25/100).sp,\r\n                                    color = Red\r\n                                )\r\n                            }\r\n                            Text(\r\n                                text = \"남은 시간(초)\",\r\n                                fontSize = (screenWidth * 7/100).sp\r\n                            )\r\n                        }\r\n\r\n                        Spacer(modifier = Modifier.height((screenHeight * 10/100).dp))\r\n\r\n                        Column(\r\n                            horizontalAlignment = Alignment.CenterHorizontally,\r\n                            verticalArrangement = Arrangement.Center\r\n                        ) {\r\n                            if(numberOfAlivePlayers/numberOfPlayers.toFloat() > 2/3f) {\r\n                                Text(\r\n                                    text = \"$numberOfAlivePlayers/$numberOfPlayers\",\r\n                                    fontSize = (screenWidth * 20/100).sp,\r\n                                    color = Green\r\n                                )\r\n                            } else if(numberOfAlivePlayers/numberOfPlayers.toFloat() <= 2/3f && numberOfAlivePlayers/numberOfPlayers.toFloat() > 1/3f) {\r\n                                Text(\r\n                                    text = \"$numberOfAlivePlayers/$numberOfPlayers\",\r\n                                    fontSize = (screenWidth * 20/100).sp,\r\n                                    color = Yellow\r\n                                )\r\n                            } else {\r\n                                Text(\r\n                                    text = \"$numberOfAlivePlayers/$numberOfPlayers\",\r\n                                    fontSize = (screenWidth * 20/100).sp,\r\n                                    color = Red\r\n                                )\r\n                            }\r\n                            Text(\r\n                                text = \"현재 생존자(명)\",\r\n                                fontSize = (screenWidth * 7/100).sp\r\n                            )\r\n                        }\r\n                        Button(\r\n                            onClick = {nextScreen()},\r\n                            colors = ButtonDefaults.buttonColors(\r\n                                containerColor = MaterialTheme.colorScheme.primary,\r\n                                contentColor = MaterialTheme.colorScheme.onPrimary\r\n                            ),\r\n                            modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                        ) {\r\n                            Text(\"다음 화면\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun InGameScreenPreview() {\r\n    SharonTheme {\r\n        InGame.InGameScreen(LocalConfiguration.current, nextScreen = {})\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sharon/screens/InGame.kt b/app/src/main/java/com/example/sharon/screens/InGame.kt
--- a/app/src/main/java/com/example/sharon/screens/InGame.kt	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/app/src/main/java/com/example/sharon/screens/InGame.kt	(date 1732523497211)
@@ -15,6 +15,8 @@
 import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.remember
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.platform.LocalConfiguration
@@ -25,18 +27,27 @@
 import com.example.sharon.ui.theme.Yellow
 import com.example.sharon.ui.theme.Red
 import com.example.sharon.ui.theme.SharonTheme
-
-// 완성
 class InGame {
     companion object {
         @Composable
         fun InGameScreen(configuration: Configuration, gameState: List<Int> = listOf(180, 10, 10), nextScreen: () -> Unit) {
+
+
+
             val screenWidth: Int = configuration.screenWidthDp
             val screenHeight: Int = configuration.screenHeightDp
 
-            val timeLeft: Int = gameState[0]
-            val numberOfPlayers: Int = gameState[1]
-            val numberOfAlivePlayers: Int = gameState[2]
+            val timeLeft: Int
+            val numberOfPlayers: Int
+            val numberOfAlivePlayers: Int
+
+            timeLeft = gameState[0]
+            numberOfPlayers = gameState[1]
+            numberOfAlivePlayers = gameState[2]
+
+            LaunchedEffect(true) {
+
+            }
 
             Scaffold { innerPadding ->
                 Box(
Index: app/src/main/java/com/example/sharon/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sharon\r\n\r\nimport android.content.pm.ActivityInfo\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport com.example.sharon.ui.theme.SharonTheme\r\nimport com.example.sharon.screens.*\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT\r\n\r\n        setContent {\r\n\r\n            val configuration = LocalConfiguration.current\r\n\r\n            SharonTheme {\r\n\r\n                var currentScreen by remember { mutableStateOf(\"StartScreen\") }\r\n                // StartScreen - HomeScreen - WaitingRoomScreen - CountdownScreen - InGameScreen - TerminationScreen - ResultScreen\r\n                // Nav 기능으로 화면 전환하자\r\n                when (currentScreen) {\r\n                    \"StartScreen\" -> Start.StartScreen(\r\n                        configuration = configuration,\r\n                        nextScreen = {\r\n                            currentScreen = \"HomeScreen\"\r\n                        }\r\n                    )\r\n                    \"HomeScreen\" -> Home.HomeScreen(\r\n                        configuration = configuration,\r\n                        nextScreen = {\r\n                            currentScreen = \"WaitingRoomScreen\"\r\n                        }\r\n                    )\r\n                    \"WaitingRoomScreen\" -> WaitingRoom.WaitingRoomScreen(\r\n                        configuration = configuration,\r\n                        nextScreen = {\r\n                            currentScreen = \"CountdownScreen\"\r\n                        }\r\n                    )\r\n                    \"CountdownScreen\" -> Countdown.CountdownScreen(\r\n                        configuration = configuration,\r\n                        nextScreen = {\r\n                            currentScreen = \"InGameScreen\"\r\n                        }\r\n                    )\r\n                    \"InGameScreen\" -> InGame.InGameScreen(\r\n                        configuration = configuration,\r\n                        nextScreen = {\r\n                            currentScreen = \"TerminationScreen\"\r\n                        }\r\n                    )\r\n                    \"TerminationScreen\" -> Termination.TerminationScreen(\r\n                        configuration = configuration,\r\n                        nextScreen = {\r\n                            currentScreen = \"ResultScreen\"\r\n                        }\r\n                    )\r\n                    \"ResultScreen\" -> Result.ResultScreen(\r\n                        configuration = configuration,\r\n                        nextScreen = {\r\n                            currentScreen = \"StartScreen\"\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun SharonPreview(){\r\n    val configuration = LocalConfiguration.current\r\n\r\n    SharonTheme {\r\n        var currentScreen by remember { mutableStateOf(\"StartScreen\") }\r\n        // StartScreen - HomeScreen - WaitingRoomScreen - CountdownScreen - InGameScreen - TerminationScreen - ResultScreen\r\n        // Nav 기능으로 화면 전환하자\r\n        when (currentScreen) {\r\n            \"StartScreen\" -> Start.StartScreen(\r\n                configuration = configuration,\r\n                nextScreen = {\r\n                    currentScreen = \"HomeScreen\"\r\n                }\r\n            )\r\n            \"HomeScreen\" -> Home.HomeScreen(\r\n                configuration = configuration,\r\n                nextScreen = {\r\n                    currentScreen = \"WaitingRoomScreen\"\r\n                }\r\n            )\r\n            \"WaitingRoomScreen\" -> WaitingRoom.WaitingRoomScreen(\r\n                configuration = configuration,\r\n                nextScreen = {\r\n                    currentScreen = \"CountdownScreen\"\r\n                }\r\n            )\r\n            \"CountdownScreen\" -> Countdown.CountdownScreen(\r\n                configuration = configuration,\r\n                nextScreen = {\r\n                    currentScreen = \"InGameScreen\"\r\n                }\r\n            )\r\n            \"InGameScreen\" -> InGame.InGameScreen(\r\n                configuration = configuration,\r\n                nextScreen = {\r\n                    currentScreen = \"TerminationScreen\"\r\n                }\r\n            )\r\n            \"TerminationScreen\" -> Termination.TerminationScreen(\r\n                configuration = configuration,\r\n                nextScreen = {\r\n                    currentScreen = \"ResultScreen\"\r\n                }\r\n            )\r\n            \"ResultScreen\" -> Result.ResultScreen(\r\n                configuration = configuration,\r\n                nextScreen = {\r\n                    currentScreen = \"StartScreen\"\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\npackage com.example.subproject\r\n\r\n// 필요한 import 추가\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport kotlinx.coroutines.delay\r\n\r\n// Retrofit 인터페이스 및 함수는 이전과 동일하게 유지합니다.\r\n// 여기서는 전체 코드를 포함하여 혼동을 피하고자 합니다.\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.rememberCoroutineScope\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.unit.dp\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.Path\r\n\r\n// Data class for response\r\ndata class NicknameResponse(val message: String)\r\ndata class Checkconnection(val connect: Boolean, val NeedToUpdate: Boolean)\r\ndata class Players(val connectCheckFrame : Int,\r\n                   val isReady: Boolean,\r\n                   val playerNumber : Int,\r\n                   val isSurvive : Boolean,\r\n                   val needToUpdate : Boolean,\r\n                   val pIndex : Int)\r\n\r\n// Retrofit interface\r\ninterface ApiService {\r\n    @GET(\"/join/{nickname}\")\r\n    suspend fun submitNickname(@Path(\"nickname\") nickname: String): NicknameResponse\r\n\r\n    @GET(\"/check/{nickname}\")\r\n    suspend fun connectionCheck(@Path(\"nickname\") nickname: String): Checkconnection\r\n\r\n    @GET(\"/playerData/{nickname}\")\r\n    suspend fun GetPlayerData(@Path(\"nickname\") nickname: String): Players\r\n}\r\n\r\n// Function to create Retrofit instance\r\nfun createApiService(): ApiService {\r\n    val retrofit = Retrofit.Builder()\r\n        .baseUrl(\"http://sharonproject.ddns.net:5522\") // Replace with your API base URL\r\n        .addConverterFactory(GsonConverterFactory.create())\r\n        .build()\r\n    return retrofit.create(ApiService::class.java)\r\n}\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            var currentscreen by remember { mutableStateOf(\"StartScreen\") }\r\n            when(currentscreen)\r\n            {\r\n                \"StartScreen\" -> StartScreen(Next = {currentscreen = \"NicknameScreen\"})\r\n                \"NicknameScreen\" -> NicknameScreen()\r\n            }\r\n        }\r\n    }\r\n}\r\n@Composable\r\nfun StartScreen(Next:() -> Unit, )\r\n{\r\n\r\n}\r\n@Composable\r\nfun NicknameScreen() {\r\n    var nickname by remember { mutableStateOf(\"\") }\r\n    var SmNickname by remember { mutableStateOf(\"\")}\r\n    var responseMessage by remember { mutableStateOf(\"\") }\r\n    val coroutineScope = rememberCoroutineScope() // Use a lifecycle-aware CoroutineScope\r\n\r\n    // ApiService를 remember로 저장하여 컴포저블이 재구성되더라도 동일한 인스턴스를 사용하도록 함\r\n    val apiService = remember { createApiService() }\r\n\r\n    // Connection 상태를 기억하도록 mutableStateOf로 선언\r\n    var connection by remember { mutableStateOf(true) }\r\n\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxSize()\r\n            .padding(16.dp),\r\n        verticalArrangement = Arrangement.Center\r\n    ) {\r\n        TextField(\r\n            value = nickname,\r\n            onValueChange = { nickname = it },\r\n            label = { Text(\"Enter your nickname\") },\r\n            modifier = Modifier.fillMaxWidth()\r\n        )\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n        Box {\r\n            Button(\r\n                onClick = {\r\n                    coroutineScope.launch {\r\n                        try {\r\n                            // 닉네임 제출 API 호출\r\n                            val response = withContext(Dispatchers.IO) {\r\n                                apiService.submitNickname(nickname)\r\n                            }\r\n                            responseMessage = response.message\r\n                            connection = true // 연결 성공 시 connection을 true로 설정\r\n                            SmNickname = nickname\r\n                        } catch (e: Exception) {\r\n                            responseMessage = \"Error: ${e.message}\"\r\n                            connection = false\r\n                        }\r\n                    }\r\n                },\r\n                modifier = Modifier.fillMaxWidth()\r\n            ) {\r\n                Text(\"Submit\")\r\n            }\r\n        }\r\n        Spacer(modifier = Modifier.height(16.dp))\r\n        Text(responseMessage)\r\n    }\r\n\r\n    // connection 상태가 변경될 때마다 실행되는 효과\r\n    LaunchedEffect(connection) {\r\n        if (connection) {\r\n            // connection이 true일 때 주기적으로 서버에 신호를 보냄\r\n            while (connection) {\r\n                try {\r\n                    /*\r\n                    val Checkresponse = withContext(Dispatchers.IO) {\r\n                        apiService.connectionCheck(SmNickname)\r\n                    }\r\n                    */\r\n                } catch (e: Exception) {\r\n                    responseMessage = \"에러 : ${e.message}\"\r\n                    // 에러 발생 시 연결 해제\r\n                    connection = false\r\n                }\r\n                // 50ms 대기하여 20fps 달성\r\n                delay(150)\r\n            }\r\n        }\r\n    }\r\n}\r\n*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sharon/MainActivity.kt b/app/src/main/java/com/example/sharon/MainActivity.kt
--- a/app/src/main/java/com/example/sharon/MainActivity.kt	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/app/src/main/java/com/example/sharon/MainActivity.kt	(date 1732523335595)
@@ -4,6 +4,8 @@
 import android.os.Bundle
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
@@ -13,6 +15,8 @@
 import androidx.compose.ui.tooling.preview.Preview
 import com.example.sharon.ui.theme.SharonTheme
 import com.example.sharon.screens.*
+import kotlinx.coroutines.launch
+
 
 class MainActivity : ComponentActivity() {
     override fun onCreate(savedInstanceState: Bundle?) {
@@ -21,11 +25,9 @@
         requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
 
         setContent {
-
             val configuration = LocalConfiguration.current
 
             SharonTheme {
-
                 var currentScreen by remember { mutableStateOf("StartScreen") }
                 // StartScreen - HomeScreen - WaitingRoomScreen - CountdownScreen - InGameScreen - TerminationScreen - ResultScreen
                 // Nav 기능으로 화면 전환하자
Index: app/src/main/java/com/example/sharon/screens/Home.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sharon.screens\r\n\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.TextFieldValue\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.sharon.ui.theme.SharonTheme\r\n\r\nclass Home {\r\n    companion object {\r\n        @Composable\r\n        fun HomeScreen(configuration: Configuration, nextScreen: () -> Unit) {\r\n            val screenWidth = configuration.screenWidthDp\r\n            val screenHeight = configuration.screenHeightDp\r\n\r\n            var codeInput by remember { mutableStateOf(TextFieldValue(\"\")) }\r\n            var idInput by remember { mutableStateOf(TextFieldValue(\"\")) }\r\n\r\n            Scaffold { innerPadding ->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .background(MaterialTheme.colorScheme.background)\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                ) {\r\n                    Column(\r\n                        verticalArrangement = Arrangement.Center,\r\n                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                        modifier = Modifier\r\n                            .padding(16.dp)\r\n                            .fillMaxSize()\r\n                    ) {\r\n                        Text(\r\n                            text = \"무궁화 꽃이\",\r\n                            fontSize = (screenWidth * 10/100).sp,\r\n                            color = MaterialTheme.colorScheme.primary\r\n                        )\r\n                        Text(\r\n                            text = \"피었습니다!\",\r\n                            fontSize = (screenWidth * 10/100).sp,\r\n                            color = MaterialTheme.colorScheme.primary\r\n                        )\r\n                        Spacer(modifier = Modifier.height((screenHeight * 10/100).dp))\r\n                        TextField(\r\n                            value = codeInput,\r\n                            onValueChange = { codeInput = it },\r\n                            placeholder = { Text(text = \"대기실 코드\") },\r\n                            modifier = Modifier.fillMaxWidth(0.8f),\r\n                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)\r\n                        )\r\n                        Spacer(modifier = Modifier.height((screenHeight * 2/100).dp))\r\n                        TextField(\r\n                            value = idInput,\r\n                            onValueChange = { idInput = it },\r\n                            placeholder = { Text(text = \"닉네임\") },\r\n                            modifier = Modifier.fillMaxWidth(0.8f),\r\n                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)\r\n                        )\r\n                        Spacer(modifier = Modifier.height((screenHeight * 2/100).dp))\r\n                        Button(\r\n                            onClick = { nextScreen() },\r\n                            colors = ButtonDefaults.buttonColors(\r\n                                containerColor = MaterialTheme.colorScheme.primary,\r\n                                contentColor = MaterialTheme.colorScheme.onPrimary,\r\n                            ),\r\n                            modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                        ) {\r\n                            Text(text = \"게임 시작\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun HomeScreenPreview() {\r\n    SharonTheme {\r\n        Home.HomeScreen(LocalConfiguration.current, nextScreen = {})\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sharon/screens/Home.kt b/app/src/main/java/com/example/sharon/screens/Home.kt
--- a/app/src/main/java/com/example/sharon/screens/Home.kt	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/app/src/main/java/com/example/sharon/screens/Home.kt	(date 1732447079131)
@@ -21,16 +21,72 @@
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.platform.LocalConfiguration
 import androidx.compose.ui.text.input.KeyboardType
-import androidx.compose.ui.text.input.TextFieldValue
 import androidx.compose.ui.tooling.preview.Preview
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import com.example.sharon.ui.theme.SharonTheme
+import com.google.gson.GsonBuilder
+import com.google.gson.annotations.SerializedName
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import retrofit2.Retrofit
+import retrofit2.converter.gson.GsonConverterFactory
+import retrofit2.converter.scalars.ScalarsConverterFactory
+import retrofit2.http.GET
+import retrofit2.http.Path
+import retrofit2.http.Query
+
+// Retrofit 인터페이스 및 데이터 클래스 정의
+data class NicknameResponse(val message: String)
+data class Checkconnection(val connect: Boolean, val NeedToUpdate: Boolean)
+// 1. JSON 구조에 맞는 데이터 클래스 정의
+data class ServerResponse(
+    @SerializedName("data") val data: List<List<Any>> // 2차원 배열에 다양한 자료형 포함
+)
+
+interface ApiService {
+    @GET("/join/{idInput}")
+    suspend fun submitNickname(@Path("idInput") idInput: String): String
+    @GET("/check/{idInput}")
+    suspend fun connectionCheck(@Path("idInput") idInput: String): Checkconnection
+    @GET("/playerData/{idInput}")
+    suspend fun getPlayerData(@Path("idInput") idInput: String): ServerResponse
+    @GET("/inputNumber/{idInput}")
+    suspend fun getNumber(@Path("idInput") idInput : String, @Query("number") numberInput : Int): Int
+    @GET("/state/{idInput}")
+    suspend fun GetGameState(@Path("idInput") idInput : String)  : List<String>
+}
+// 내부적으로 싱글톤을 관리하기 위한 객체
+private object RetrofitHolder {
+    private val retrofit: Retrofit by lazy {
+        Retrofit.Builder()
+            .baseUrl("http://sharonproject.ddns.net:5522") // 베이스 URL
+            .addConverterFactory(GsonConverterFactory.create(GsonBuilder().setLenient().create())) // JSON 파싱용
+            .build()
+    }
+    val apiService: ApiService by lazy {
+        retrofit.create(ApiService::class.java)
+    }
+}
+fun createApiService(): ApiService {
+    return RetrofitHolder.apiService
+}
+fun SecondApiService(): ApiService {
+    return Retrofit.Builder()
+        .baseUrl("http://sharonproject.ddns.net:5522")
+        .addConverterFactory(ScalarsConverterFactory.create()) // 단순 문자열 처리용
+        .build()
+        .create(ApiService::class.java)
+}
+
+
 
 class Home {
     companion object {
@@ -39,8 +95,14 @@
             val screenWidth = configuration.screenWidthDp
             val screenHeight = configuration.screenHeightDp
 
-            var codeInput by remember { mutableStateOf(TextFieldValue("")) }
-            var idInput by remember { mutableStateOf(TextFieldValue("")) }
+            var codeInput by remember { mutableStateOf("") }
+            var idInput by remember { mutableStateOf("") }
+            //서버 변수
+            val coroutineScope = rememberCoroutineScope()
+            val apiService2 = remember { SecondApiService() }
+
+            var responseMessage by remember { mutableStateOf("") }
+
 
             Scaffold { innerPadding ->
                 Box(
@@ -84,7 +146,19 @@
                         )
                         Spacer(modifier = Modifier.height((screenHeight * 2/100).dp))
                         Button(
-                            onClick = { nextScreen() },
+                            onClick = {
+
+                                coroutineScope.launch {
+                                    try {
+                                        val response = withContext(Dispatchers.IO) {
+                                            apiService2.submitNickname(idInput)
+                                        }
+                                        responseMessage = response
+                                    } catch (e: Exception) {
+                                        responseMessage = "Error: ${e.message}"
+                                    }
+                                }
+                               },
                             colors = ButtonDefaults.buttonColors(
                                 containerColor = MaterialTheme.colorScheme.primary,
                                 contentColor = MaterialTheme.colorScheme.onPrimary,
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"deploymentTargetSelector\">\r\n    <selectionStates>\r\n      <SelectionState runConfigName=\"app\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"InGameScreenPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n      <SelectionState runConfigName=\"CountdownScreenPreview\">\r\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\r\n      </SelectionState>\r\n    </selectionStates>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/.idea/deploymentTargetSelector.xml	(date 1732524466843)
@@ -2,14 +2,16 @@
 <project version="4">
   <component name="deploymentTargetSelector">
     <selectionStates>
-      <SelectionState runConfigName="app">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="InGameScreenPreview">
+      <SelectionState runConfigName="Unnamed">
         <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="CountdownScreenPreview">
-        <option name="selectionMode" value="DROPDOWN" />
+        <DropdownSelection timestamp="2024-11-25T08:36:59.022122200Z">
+          <Target type="DEFAULT_BOOT">
+            <handle>
+              <DeviceId pluginId="LocalEmulator" identifier="path=C:\Users\jrjin\.android\avd\Medium_Phone_API_35.avd" />
+            </handle>
+          </Target>
+        </DropdownSelection>
+        <DialogSelection />
       </SelectionState>
     </selectionStates>
   </component>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"jbr-21\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/.idea/misc.xml	(date 1732437865199)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
Index: app/src/main/java/com/example/sharon/screens/WaitingRoom.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sharon.screens\r\n\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport com.example.sharon.ui.theme.SharonTheme\r\n\r\nclass WaitingRoom {\r\n    companion object {\r\n        @Composable\r\n        fun WaitingRoomScreen(configuration: Configuration, nextScreen: () -> Unit) {\r\n            val screenWidth = configuration.screenWidthDp\r\n            val screenHeight = configuration.screenHeightDp\r\n\r\n            Scaffold { innerPadding ->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .background(MaterialTheme.colorScheme.background)\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                ) {\r\n                    Column(\r\n                        modifier = Modifier\r\n                            .fillMaxSize()\r\n                            .padding(16.dp),\r\n                        verticalArrangement = Arrangement.Center,\r\n                        horizontalAlignment = Alignment.CenterHorizontally\r\n                    ) {\r\n                        Text(\"대기실 화면\")\r\n                        Button(\r\n                            onClick = {nextScreen()},\r\n                            colors = ButtonDefaults.buttonColors(\r\n                                containerColor = MaterialTheme.colorScheme.primary,\r\n                                contentColor = MaterialTheme.colorScheme.onPrimary\r\n                            ),\r\n                            modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                        ) {\r\n                            Text(\"다음 화면\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun WaitingRoomScreenPreview() {\r\n    SharonTheme {\r\n        WaitingRoom.WaitingRoomScreen(LocalConfiguration.current, nextScreen = {})\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sharon/screens/WaitingRoom.kt b/app/src/main/java/com/example/sharon/screens/WaitingRoom.kt
--- a/app/src/main/java/com/example/sharon/screens/WaitingRoom.kt	(revision 1e965139d82c11033e6404da019073120203bcc6)
+++ b/app/src/main/java/com/example/sharon/screens/WaitingRoom.kt	(date 1732445814117)
@@ -13,6 +13,8 @@
 import androidx.compose.material3.Scaffold
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.platform.LocalConfiguration
@@ -20,12 +22,15 @@
 import androidx.compose.ui.unit.dp
 import com.example.sharon.ui.theme.SharonTheme
 
+
 class WaitingRoom {
     companion object {
         @Composable
         fun WaitingRoomScreen(configuration: Configuration, nextScreen: () -> Unit) {
             val screenWidth = configuration.screenWidthDp
             val screenHeight = configuration.screenHeightDp
+            val coroutineScope = rememberCoroutineScope()
+            val apiService2 = remember { SecondApiService() }
 
             Scaffold { innerPadding ->
                 Box(
