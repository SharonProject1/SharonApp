Index: app/src/main/java/com/example/sharonapp/screens/InGameClass.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sharonapp.screens\r\n\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.setValue\r\n\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.example.sharonapp.ui.theme.Green\r\nimport com.example.sharonapp.ui.theme.Yellow\r\nimport com.example.sharonapp.ui.theme.Red\r\nimport com.example.sharonapp.utility.Checkconnection\r\nimport com.example.sharonapp.utility.GameState\r\nimport com.example.sharonapp.utility.createApiService\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.withContext\r\n\r\n// 완성\r\nclass InGameClass {\r\n    companion object {\r\n        @Composable\r\n        fun InGameScreen(idInput: String, configuration: Configuration, nextScreen: () -> Unit) {\r\n            val screenWidth: Int = configuration.screenWidthDp\r\n            val screenHeight: Int = configuration.screenHeightDp\r\n\r\n\r\n            val apiService = remember { createApiService() }\r\n            var checkResponse by remember {\r\n                mutableStateOf(Checkconnection(connect = \"tru\", needToUpdate = true, string = \"서승준병신\"))\r\n            }\r\n            var gameState by remember { mutableStateOf(GameState(data = listOf())) }\r\n            var timeLeft by remember { mutableStateOf(1) }\r\n            var numberOfAlivePlayers by remember { mutableStateOf(1) }\r\n            var numberOfPlayers by remember { mutableStateOf(1) }\r\n            LaunchedEffect(Unit) {\r\n                while(true)\r\n                {\r\n                    try {\r\n                        withContext(Dispatchers.IO)\r\n                        {\r\n                            var getstate = apiService.getGameState()\r\n                            gameState = getstate\r\n                        }\r\n                        timeLeft = gameState.data[8].toInt()\r\n                        numberOfAlivePlayers = gameState.data[6].toInt()\r\n                        numberOfPlayers = gameState.data[5].toInt()\r\n                        delay(100)\r\n                    }\r\n                    catch (e: Exception)\r\n                    {\r\n                        println(\"도비\")\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            Scaffold { innerPadding ->\r\n                Box(\r\n                    modifier = Modifier\r\n                        .background(MaterialTheme.colorScheme.background)\r\n                        .fillMaxSize()\r\n                        .padding(innerPadding)\r\n                ) {\r\n                    Column(\r\n                        horizontalAlignment = Alignment.CenterHorizontally,\r\n                        verticalArrangement = Arrangement.Center,\r\n                        modifier = Modifier\r\n                            .fillMaxSize()\r\n                            .padding(8.dp)\r\n                    ) {\r\n                        Column(\r\n                            horizontalAlignment = Alignment.CenterHorizontally,\r\n                            verticalArrangement = Arrangement.Center\r\n                        ) {\r\n                            if(timeLeft > 90) {\r\n                                Text(\r\n                                    text = \"$timeLeft\",\r\n                                    fontSize = (screenWidth * 25/100).sp,\r\n                                    color = Green\r\n                                )\r\n                            } else if(timeLeft in 31..90) {\r\n                                Text(\r\n                                    text = \"$timeLeft\",\r\n                                    fontSize = (screenWidth * 25/100).sp,\r\n                                    color = Yellow\r\n                                )\r\n                            } else {\r\n                                Text(\r\n                                    text = \"$timeLeft\",\r\n                                    fontSize = (screenWidth * 25/100).sp,\r\n                                    color = Red\r\n                                )\r\n                            }\r\n                            Text(\r\n                                text = \"남은 시간(초)\",\r\n                                fontSize = (screenWidth * 7/100).sp\r\n                            )\r\n                        }\r\n\r\n                        Spacer(modifier = Modifier.height((screenHeight * 10/100).dp))\r\n\r\n                        Column(\r\n                            horizontalAlignment = Alignment.CenterHorizontally,\r\n                            verticalArrangement = Arrangement.Center\r\n                        ) {\r\n                            if(numberOfAlivePlayers/numberOfPlayers.toFloat() > 2/3f) {\r\n                                Text(\r\n                                    text = \"$numberOfAlivePlayers/$numberOfPlayers\",\r\n                                    fontSize = (screenWidth * 20/100).sp,\r\n                                    color = Green\r\n                                )\r\n                            } else if(numberOfAlivePlayers/numberOfPlayers.toFloat() <= 2/3f && numberOfAlivePlayers/numberOfPlayers.toFloat() > 1/3f) {\r\n                                Text(\r\n                                    text = \"$numberOfAlivePlayers/$numberOfPlayers\",\r\n                                    fontSize = (screenWidth * 20/100).sp,\r\n                                    color = Yellow\r\n                                )\r\n                            } else {\r\n                                Text(\r\n                                    text = \"$numberOfAlivePlayers/$numberOfPlayers\",\r\n                                    fontSize = (screenWidth * 20/100).sp,\r\n                                    color = Red\r\n                                )\r\n                            }\r\n                            Text(\r\n                                text = \"현재 생존자(명)\",\r\n                                fontSize = (screenWidth * 7/100).sp\r\n                            )\r\n                        }\r\n                        Button(\r\n                            onClick = {nextScreen()},\r\n                            colors = ButtonDefaults.buttonColors(\r\n                                containerColor = MaterialTheme.colorScheme.primary,\r\n                                contentColor = MaterialTheme.colorScheme.onPrimary\r\n                            ),\r\n                            modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                        ) {\r\n                            Text(\"다음 화면\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var eliminated by remember { mutableStateOf(false) }\r\n            var Success by remember { mutableStateOf(false) }\r\n\r\n            var firstEliminated by remember { mutableStateOf(false) }\r\n            var firstSuccess by remember { mutableStateOf(false) }\r\n            LaunchedEffect(eliminated) {\r\n                if (!firstEliminated)\r\n                {\r\n                    firstEliminated = true\r\n                }\r\n                else\r\n                {\r\n                    withContext(Dispatchers.IO)\r\n                    {\r\n                        apiService.sendFailed(idInput)\r\n                        /* 팝업 띄우소*/\r\n                    }\r\n                }\r\n            }\r\n            LaunchedEffect(Success) {\r\n                if (!firstSuccess)\r\n                {\r\n                    firstSuccess = true\r\n                }\r\n                else\r\n                {\r\n                    withContext(Dispatchers.IO)\r\n                    {\r\n                        apiService.sendSuccess(idInput)\r\n                        /*팝업 띄우소*/\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sharonapp/screens/InGameClass.kt b/app/src/main/java/com/example/sharonapp/screens/InGameClass.kt
--- a/app/src/main/java/com/example/sharonapp/screens/InGameClass.kt	(revision 8b510ac6e8700b494a828104e48d949a850c94ff)
+++ b/app/src/main/java/com/example/sharonapp/screens/InGameClass.kt	(date 1732981782161)
@@ -57,7 +57,7 @@
                 {
                     try {
                         withContext(Dispatchers.IO)
-                        {
+                        {   apiService
                             var getstate = apiService.getGameState()
                             gameState = getstate
                         }
