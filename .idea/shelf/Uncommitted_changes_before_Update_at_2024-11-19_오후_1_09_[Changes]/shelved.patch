Index: app/src/main/java/com/example/sharon/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sharon\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonColors\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TextField\r\nimport androidx.compose.material3.TextFieldColors\r\nimport androidx.compose.material3.TextFieldDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.geometry.Size\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.onGloballyPositioned\r\nimport androidx.compose.ui.text.input.KeyboardType\r\nimport androidx.compose.ui.text.input.TextFieldValue\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.em\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.unit.toSize\r\nimport com.example.sharon.ui.theme.SharonTheme\r\nimport kotlinx.coroutines.delay\r\n\r\nclass MainActivity : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            SharonTheme {\r\n                var currentScreen by remember { mutableStateOf(\"StartScreen\") }\r\n                // StartScreen - HomeScreen - WaitingRoomScreen - CountdownScreen - InGameScreen - TerminationScreen - ResultScreen\r\n                // Nav 기능으로 화면 전환하자\r\n                when (currentScreen) {\r\n                    \"StartScreen\" -> StartScreen(nextScreen = {\r\n                        currentScreen = \"HomeScreen\"\r\n                    })\r\n                    \"HomeScreen\" -> HomeScreen(nextScreen = {\r\n                        currentScreen = \"WaitingRoomScreen\"\r\n                    })\r\n                    \"WaitingRoomScreen\" -> WaitingRoomScreen(nextScreen = {\r\n                        currentScreen = \"CountdownScreen\"\r\n                    })\r\n                    \"CountdownScreen\" -> CountdownScreen(nextScreen = {\r\n                        currentScreen = \"InGameScreen\"\r\n                    })\r\n                    \"InGameScreen\" -> InGameScreen(nextScreen = {\r\n                        currentScreen = \"TerminationScreen\"\r\n                    })\r\n                    \"TerminationScreen\" -> TerminationScreen(nextScreen = {\r\n                        currentScreen = \"ResultScreen\"\r\n                    })\r\n                    \"ResultScreen\" -> ResultScreen(nextScreen = {\r\n                        currentScreen = \"StartScreen\"\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//ThemedBox, ThemedText등 만들어서 디자인 통일하자\r\n\r\n@Composable\r\nfun StartScreen(nextScreen: () -> Unit) {\r\n    var containerSize by remember { mutableStateOf(Size.Zero) }\r\n\r\n    Scaffold { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .background(MaterialTheme.colorScheme.background)\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            Column(\r\n                verticalArrangement = Arrangement.Center,\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                modifier = Modifier\r\n                    .padding(16.dp)\r\n                    .fillMaxSize()\r\n                    .onGloballyPositioned { coordinates ->\r\n                        containerSize = coordinates.size.toSize()\r\n                    }\r\n            ) {\r\n                Text(\r\n                    \"무궁화 꽃이\",\r\n                    fontSize = (containerSize.width * 5/100).toInt().sp,\r\n                    color = MaterialTheme.colorScheme.onBackground,\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Text(\r\n                    \"피었습니다!\",\r\n                    fontSize = (containerSize.width * 5/100).toInt().sp,\r\n                    color = MaterialTheme.colorScheme.onBackground,\r\n                    modifier = Modifier.fillMaxWidth(),\r\n                    textAlign = TextAlign.Center\r\n                )\r\n                Button(\r\n                    onClick = {nextScreen()},\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = MaterialTheme.colorScheme.primary,\r\n                        contentColor = MaterialTheme.colorScheme.onPrimary\r\n                    ),\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                ) {\r\n                    Text(\"다음 화면\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun HomeScreen(nextScreen: () -> Unit) {\r\n    var containerSize by remember { mutableStateOf(Size.Zero) }\r\n    var codeInput by remember { mutableStateOf(TextFieldValue(\"\")) }\r\n\r\n    Scaffold { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .background(MaterialTheme.colorScheme.background)\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            Column(\r\n                verticalArrangement = Arrangement.Center,\r\n                horizontalAlignment = Alignment.CenterHorizontally,\r\n                modifier = Modifier\r\n                    .padding(16.dp)\r\n                    .fillMaxSize()\r\n                    .onGloballyPositioned { coordinates ->\r\n                        containerSize = coordinates.size.toSize()\r\n                    }\r\n            ) {\r\n                Spacer(modifier = Modifier.height(50.dp))\r\n                Text(\r\n                    text = \"무궁화 꽃이\",\r\n                    fontSize = (containerSize.width * 5/100).toInt().sp\r\n                )\r\n                Text(\r\n                    text = \"피었습니다\",\r\n                    fontSize = (containerSize.width * 5/100).toInt().sp\r\n                )\r\n                Spacer(modifier = Modifier.height((containerSize.height * 5/100).toInt().dp))\r\n                TextField(\r\n                    value = codeInput,\r\n                    onValueChange = { codeInput = it },\r\n                    placeholder = { Text(text = \"코드를 입력하세요\") },\r\n                    modifier = Modifier.fillMaxWidth(0.8f),\r\n                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)\r\n                )\r\n                Spacer(modifier = Modifier.height(16.dp))\r\n                Button(\r\n                    onClick = { nextScreen() },\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = MaterialTheme.colorScheme.primary,\r\n                        contentColor = MaterialTheme.colorScheme.onPrimary,\r\n                    ),\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                ) {\r\n                    Text(text = \"게임 시작\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun WaitingRoomScreen(nextScreen: () -> Unit) {\r\n    Scaffold { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .background(MaterialTheme.colorScheme.background)\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(16.dp),\r\n                verticalArrangement = Arrangement.Center,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\"대기실 화면\")\r\n                Button(\r\n                    onClick = {nextScreen()},\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = MaterialTheme.colorScheme.primary,\r\n                        contentColor = MaterialTheme.colorScheme.onPrimary\r\n                    ),\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                ) {\r\n                    Text(\"다음 화면\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun CountdownScreen(nextScreen: () -> Unit) {\r\n    var count by remember { mutableStateOf(3) }\r\n\r\n    LaunchedEffect(Unit) {\r\n        while (count > -1) {\r\n            delay(1000)\r\n            count--\r\n        }\r\n        nextScreen()\r\n    }\r\n\r\n    val displayText = if (count > 0) \"$count\" else \"땡!\"\r\n    Scaffold { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .background(MaterialTheme.colorScheme.background)\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            Box(\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentAlignment = Alignment.Center\r\n            ) {\r\n                Text(\r\n                    text = displayText,\r\n                    fontSize = 300.sp,\r\n                    color = MaterialTheme.colorScheme.secondary,\r\n                    style = MaterialTheme.typography.displayLarge\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun InGameScreen(nextScreen: () -> Unit) {\r\n    Scaffold { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .background(MaterialTheme.colorScheme.background)\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(16.dp),\r\n                verticalArrangement = Arrangement.Center,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\"인게임 화면\")\r\n                Button(\r\n                    onClick = {nextScreen()},\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = MaterialTheme.colorScheme.primary,\r\n                        contentColor = MaterialTheme.colorScheme.onPrimary\r\n                    ),\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                ) {\r\n                    Text(\"다음 화면\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun TerminationScreen(nextScreen: () -> Unit) {\r\n    Scaffold { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .background(MaterialTheme.colorScheme.background)\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(16.dp),\r\n                verticalArrangement = Arrangement.Center,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\"종료 화면(그냥 이거 팝업으로 띄우자)\")\r\n                Button(\r\n                    onClick = {nextScreen()},\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = MaterialTheme.colorScheme.primary,\r\n                        contentColor = MaterialTheme.colorScheme.onPrimary\r\n                    ),\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                ) {\r\n                    Text(\"다음 화면\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun ResultScreen(nextScreen: () -> Unit) {\r\n    Scaffold { innerPadding ->\r\n        Box(\r\n            modifier = Modifier\r\n                .background(MaterialTheme.colorScheme.background)\r\n                .fillMaxSize()\r\n                .padding(innerPadding)\r\n        ) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(16.dp),\r\n                verticalArrangement = Arrangement.Center,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\"결과 화면\")\r\n                Button(\r\n                    onClick = {nextScreen()},\r\n                    colors = ButtonDefaults.buttonColors(\r\n                        containerColor = MaterialTheme.colorScheme.primary,\r\n                        contentColor = MaterialTheme.colorScheme.onPrimary\r\n                    ),\r\n                    modifier = Modifier.align(Alignment.CenterHorizontally)\r\n                ) {\r\n                    Text(\"홈으로 돌아가기\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun SharonPreview(){\r\n    SharonTheme {\r\n        var currentScreen by remember { mutableStateOf(\"StartScreen\") }\r\n\r\n        when (currentScreen) {\r\n            \"StartScreen\" -> StartScreen(nextScreen = {\r\n                currentScreen = \"HomeScreen\"\r\n            })\r\n            \"HomeScreen\" -> HomeScreen(nextScreen = {\r\n                currentScreen = \"WaitingRoomScreen\"\r\n            })\r\n            \"WaitingRoomScreen\" -> WaitingRoomScreen(nextScreen = {\r\n                currentScreen = \"CountdownScreen\"\r\n            })\r\n            \"CountdownScreen\" -> CountdownScreen(nextScreen = {\r\n                currentScreen = \"InGameScreen\"\r\n            })\r\n            \"InGameScreen\" -> InGameScreen(nextScreen = {\r\n                currentScreen = \"TerminationScreen\"\r\n            })\r\n            \"TerminationScreen\" -> TerminationScreen(nextScreen = {\r\n                currentScreen = \"ResultScreen\"\r\n            })\r\n            \"ResultScreen\" -> ResultScreen(nextScreen = {\r\n                currentScreen = \"StartScreen\"\r\n            })\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sharon/MainActivity.kt b/app/src/main/java/com/example/sharon/MainActivity.kt
--- a/app/src/main/java/com/example/sharon/MainActivity.kt	(revision 3001975a390315b2811dd1b85c17c687cfde85bf)
+++ b/app/src/main/java/com/example/sharon/MainActivity.kt	(date 1731922982055)
@@ -172,9 +172,24 @@
                     modifier = Modifier.fillMaxWidth(0.8f),
                     keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)
                 )
+                Spacer(modifier = Modifier.height(16.dp))
+                TextField(
+                    value = codeInput,
+                    onValueChange = { codeInput = it },
+                    placeholder = { Text(text = "닉네임을 입력하세요") },
+                    modifier = Modifier.fillMaxWidth(0.8f),
+                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text)
+                )
                 Spacer(modifier = Modifier.height(16.dp))
                 Button(
-                    onClick = { nextScreen() },
+                    onClick = {
+
+
+
+                        nextScreen()
+
+
+                              },
                     colors = ButtonDefaults.buttonColors(
                         containerColor = MaterialTheme.colorScheme.primary,
                         contentColor = MaterialTheme.colorScheme.onPrimary,
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"jbr-21\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 3001975a390315b2811dd1b85c17c687cfde85bf)
+++ b/.idea/misc.xml	(date 1731919821012)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
